// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  claim: (where?: ClaimWhereInput) => Promise<boolean>;
  token: (where?: TokenWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  claim: (where: ClaimWhereUniqueInput) => ClaimNullablePromise;
  claims: (args?: {
    where?: ClaimWhereInput;
    orderBy?: ClaimOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Claim>;
  claimsConnection: (args?: {
    where?: ClaimWhereInput;
    orderBy?: ClaimOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClaimConnectionPromise;
  token: (where: TokenWhereUniqueInput) => TokenNullablePromise;
  tokens: (args?: {
    where?: TokenWhereInput;
    orderBy?: TokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Token>;
  tokensConnection: (args?: {
    where?: TokenWhereInput;
    orderBy?: TokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TokenConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createClaim: (data: ClaimCreateInput) => ClaimPromise;
  updateClaim: (args: {
    data: ClaimUpdateInput;
    where: ClaimWhereUniqueInput;
  }) => ClaimPromise;
  updateManyClaims: (args: {
    data: ClaimUpdateManyMutationInput;
    where?: ClaimWhereInput;
  }) => BatchPayloadPromise;
  upsertClaim: (args: {
    where: ClaimWhereUniqueInput;
    create: ClaimCreateInput;
    update: ClaimUpdateInput;
  }) => ClaimPromise;
  deleteClaim: (where: ClaimWhereUniqueInput) => ClaimPromise;
  deleteManyClaims: (where?: ClaimWhereInput) => BatchPayloadPromise;
  createToken: (data: TokenCreateInput) => TokenPromise;
  updateToken: (args: {
    data: TokenUpdateInput;
    where: TokenWhereUniqueInput;
  }) => TokenPromise;
  updateManyTokens: (args: {
    data: TokenUpdateManyMutationInput;
    where?: TokenWhereInput;
  }) => BatchPayloadPromise;
  upsertToken: (args: {
    where: TokenWhereUniqueInput;
    create: TokenCreateInput;
    update: TokenUpdateInput;
  }) => TokenPromise;
  deleteToken: (where: TokenWhereUniqueInput) => TokenPromise;
  deleteManyTokens: (where?: TokenWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  claim: (
    where?: ClaimSubscriptionWhereInput
  ) => ClaimSubscriptionPayloadSubscription;
  token: (
    where?: TokenSubscriptionWhereInput
  ) => TokenSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TokenType = "ACCOUNT_ACTIVATION" | "RESET_PASSWORD";

export type SexeType = "HOMME" | "FEMME" | "AUTRE";

export type UserRole = "ADMIN" | "STAFF" | "SIMPLE";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ClaimOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "email_ASC"
  | "email_DESC";

export type TokenOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "value_ASC"
  | "value_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "isBaned_ASC"
  | "isBaned_DESC"
  | "address_ASC"
  | "address_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "lastLoginTime_ASC"
  | "lastLoginTime_DESC"
  | "lastLogoutTime_ASC"
  | "lastLogoutTime_DESC"
  | "isOnline_ASC"
  | "isOnline_DESC"
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "birthDate_ASC"
  | "birthDate_DESC"
  | "sexe_ASC"
  | "sexe_DESC"
  | "telephone_ASC"
  | "telephone_DESC"
  | "isActive_ASC"
  | "isActive_DESC"
  | "role_ASC"
  | "role_DESC"
  | "image_ASC"
  | "image_DESC";

export interface TokenUpdateInput {
  type?: Maybe<TokenType>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  value?: Maybe<String>;
}

export type ClaimWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserWhereInput {
  isBaned?: Maybe<Boolean>;
  isBaned_not?: Maybe<Boolean>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  lastLoginTime?: Maybe<DateTimeInput>;
  lastLoginTime_not?: Maybe<DateTimeInput>;
  lastLoginTime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastLoginTime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastLoginTime_lt?: Maybe<DateTimeInput>;
  lastLoginTime_lte?: Maybe<DateTimeInput>;
  lastLoginTime_gt?: Maybe<DateTimeInput>;
  lastLoginTime_gte?: Maybe<DateTimeInput>;
  lastLogoutTime?: Maybe<DateTimeInput>;
  lastLogoutTime_not?: Maybe<DateTimeInput>;
  lastLogoutTime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastLogoutTime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastLogoutTime_lt?: Maybe<DateTimeInput>;
  lastLogoutTime_lte?: Maybe<DateTimeInput>;
  lastLogoutTime_gt?: Maybe<DateTimeInput>;
  lastLogoutTime_gte?: Maybe<DateTimeInput>;
  isOnline?: Maybe<Boolean>;
  isOnline_not?: Maybe<Boolean>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  birthDate?: Maybe<DateTimeInput>;
  birthDate_not?: Maybe<DateTimeInput>;
  birthDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthDate_lt?: Maybe<DateTimeInput>;
  birthDate_lte?: Maybe<DateTimeInput>;
  birthDate_gt?: Maybe<DateTimeInput>;
  birthDate_gte?: Maybe<DateTimeInput>;
  sexe?: Maybe<SexeType>;
  sexe_not?: Maybe<SexeType>;
  sexe_in?: Maybe<SexeType[] | SexeType>;
  sexe_not_in?: Maybe<SexeType[] | SexeType>;
  telephone?: Maybe<Int>;
  telephone_not?: Maybe<Int>;
  telephone_in?: Maybe<Int[] | Int>;
  telephone_not_in?: Maybe<Int[] | Int>;
  telephone_lt?: Maybe<Int>;
  telephone_lte?: Maybe<Int>;
  telephone_gt?: Maybe<Int>;
  telephone_gte?: Maybe<Int>;
  isActive?: Maybe<Boolean>;
  isActive_not?: Maybe<Boolean>;
  role?: Maybe<UserRole>;
  role_not?: Maybe<UserRole>;
  role_in?: Maybe<UserRole[] | UserRole>;
  role_not_in?: Maybe<UserRole[] | UserRole>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface TokenUpdateManyMutationInput {
  type?: Maybe<TokenType>;
  value?: Maybe<String>;
}

export interface ClaimWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  AND?: Maybe<ClaimWhereInput[] | ClaimWhereInput>;
  OR?: Maybe<ClaimWhereInput[] | ClaimWhereInput>;
  NOT?: Maybe<ClaimWhereInput[] | ClaimWhereInput>;
}

export type TokenWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  value?: Maybe<String>;
}>;

export interface UserCreateInput {
  isBaned?: Maybe<Boolean>;
  address?: Maybe<String>;
  description?: Maybe<String>;
  lastLoginTime?: Maybe<DateTimeInput>;
  lastLogoutTime?: Maybe<DateTimeInput>;
  isOnline?: Maybe<Boolean>;
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  firstName: String;
  lastName: String;
  birthDate: DateTimeInput;
  sexe: SexeType;
  telephone?: Maybe<Int>;
  isActive?: Maybe<Boolean>;
  role: UserRole;
  image?: Maybe<String>;
}

export interface UserUpdateInput {
  isBaned?: Maybe<Boolean>;
  address?: Maybe<String>;
  description?: Maybe<String>;
  lastLoginTime?: Maybe<DateTimeInput>;
  lastLogoutTime?: Maybe<DateTimeInput>;
  isOnline?: Maybe<Boolean>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  birthDate?: Maybe<DateTimeInput>;
  sexe?: Maybe<SexeType>;
  telephone?: Maybe<Int>;
  isActive?: Maybe<Boolean>;
  role?: Maybe<UserRole>;
  image?: Maybe<String>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface TokenCreateInput {
  id?: Maybe<ID_Input>;
  type: TokenType;
  user: UserCreateOneInput;
  value: String;
}

export interface ClaimSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClaimWhereInput>;
  AND?: Maybe<ClaimSubscriptionWhereInput[] | ClaimSubscriptionWhereInput>;
  OR?: Maybe<ClaimSubscriptionWhereInput[] | ClaimSubscriptionWhereInput>;
  NOT?: Maybe<ClaimSubscriptionWhereInput[] | ClaimSubscriptionWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  telephone?: Maybe<Int>;
}>;

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ClaimCreateInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  content: String;
  email: String;
}

export interface ClaimUpdateInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  email?: Maybe<String>;
}

export interface ClaimUpdateManyMutationInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  email?: Maybe<String>;
}

export interface TokenSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TokenWhereInput>;
  AND?: Maybe<TokenSubscriptionWhereInput[] | TokenSubscriptionWhereInput>;
  OR?: Maybe<TokenSubscriptionWhereInput[] | TokenSubscriptionWhereInput>;
  NOT?: Maybe<TokenSubscriptionWhereInput[] | TokenSubscriptionWhereInput>;
}

export interface UserUpdateDataInput {
  isBaned?: Maybe<Boolean>;
  address?: Maybe<String>;
  description?: Maybe<String>;
  lastLoginTime?: Maybe<DateTimeInput>;
  lastLogoutTime?: Maybe<DateTimeInput>;
  isOnline?: Maybe<Boolean>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  birthDate?: Maybe<DateTimeInput>;
  sexe?: Maybe<SexeType>;
  telephone?: Maybe<Int>;
  isActive?: Maybe<Boolean>;
  role?: Maybe<UserRole>;
  image?: Maybe<String>;
}

export interface TokenWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<TokenType>;
  type_not?: Maybe<TokenType>;
  type_in?: Maybe<TokenType[] | TokenType>;
  type_not_in?: Maybe<TokenType[] | TokenType>;
  user?: Maybe<UserWhereInput>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TokenWhereInput[] | TokenWhereInput>;
  OR?: Maybe<TokenWhereInput[] | TokenWhereInput>;
  NOT?: Maybe<TokenWhereInput[] | TokenWhereInput>;
}

export interface UserUpdateManyMutationInput {
  isBaned?: Maybe<Boolean>;
  address?: Maybe<String>;
  description?: Maybe<String>;
  lastLoginTime?: Maybe<DateTimeInput>;
  lastLogoutTime?: Maybe<DateTimeInput>;
  isOnline?: Maybe<Boolean>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  birthDate?: Maybe<DateTimeInput>;
  sexe?: Maybe<SexeType>;
  telephone?: Maybe<Int>;
  isActive?: Maybe<Boolean>;
  role?: Maybe<UserRole>;
  image?: Maybe<String>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ClaimEdge {
  node: Claim;
  cursor: String;
}

export interface ClaimEdgePromise extends Promise<ClaimEdge>, Fragmentable {
  node: <T = ClaimPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClaimEdgeSubscription
  extends Promise<AsyncIterator<ClaimEdge>>,
    Fragmentable {
  node: <T = ClaimSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  isBaned?: Boolean;
  address?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  description?: String;
  lastLoginTime?: DateTimeOutput;
  lastLogoutTime?: DateTimeOutput;
  isOnline?: Boolean;
  id: ID_Output;
  email: String;
  password: String;
  firstName: String;
  lastName: String;
  birthDate: DateTimeOutput;
  sexe: SexeType;
  telephone?: Int;
  isActive?: Boolean;
  role: UserRole;
  image?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  isBaned: () => Promise<Boolean>;
  address: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  lastLoginTime: () => Promise<DateTimeOutput>;
  lastLogoutTime: () => Promise<DateTimeOutput>;
  isOnline: () => Promise<Boolean>;
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  birthDate: () => Promise<DateTimeOutput>;
  sexe: () => Promise<SexeType>;
  telephone: () => Promise<Int>;
  isActive: () => Promise<Boolean>;
  role: () => Promise<UserRole>;
  image: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  isBaned: () => Promise<AsyncIterator<Boolean>>;
  address: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  lastLoginTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastLogoutTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  isOnline: () => Promise<AsyncIterator<Boolean>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  birthDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  sexe: () => Promise<AsyncIterator<SexeType>>;
  telephone: () => Promise<AsyncIterator<Int>>;
  isActive: () => Promise<AsyncIterator<Boolean>>;
  role: () => Promise<AsyncIterator<UserRole>>;
  image: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface Claim {
  id: ID_Output;
  title?: String;
  content: String;
  email: String;
}

export interface ClaimPromise extends Promise<Claim>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  email: () => Promise<String>;
}

export interface ClaimSubscription
  extends Promise<AsyncIterator<Claim>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface ClaimNullablePromise
  extends Promise<Claim | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  email: () => Promise<String>;
}

export interface TokenSubscriptionPayload {
  mutation: MutationType;
  node: Token;
  updatedFields: String[];
  previousValues: TokenPreviousValues;
}

export interface TokenSubscriptionPayloadPromise
  extends Promise<TokenSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TokenPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TokenPreviousValuesPromise>() => T;
}

export interface TokenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TokenSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TokenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TokenPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateToken {
  count: Int;
}

export interface AggregateTokenPromise
  extends Promise<AggregateToken>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTokenSubscription
  extends Promise<AsyncIterator<AggregateToken>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TokenConnection {
  pageInfo: PageInfo;
  edges: TokenEdge[];
}

export interface TokenConnectionPromise
  extends Promise<TokenConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TokenEdge>>() => T;
  aggregate: <T = AggregateTokenPromise>() => T;
}

export interface TokenConnectionSubscription
  extends Promise<AsyncIterator<TokenConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TokenEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTokenSubscription>() => T;
}

export interface User {
  isBaned?: Boolean;
  address?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  description?: String;
  lastLoginTime?: DateTimeOutput;
  lastLogoutTime?: DateTimeOutput;
  isOnline?: Boolean;
  id: ID_Output;
  email: String;
  password: String;
  firstName: String;
  lastName: String;
  birthDate: DateTimeOutput;
  sexe: SexeType;
  telephone?: Int;
  isActive?: Boolean;
  role: UserRole;
  image?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  isBaned: () => Promise<Boolean>;
  address: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  lastLoginTime: () => Promise<DateTimeOutput>;
  lastLogoutTime: () => Promise<DateTimeOutput>;
  isOnline: () => Promise<Boolean>;
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  birthDate: () => Promise<DateTimeOutput>;
  sexe: () => Promise<SexeType>;
  telephone: () => Promise<Int>;
  isActive: () => Promise<Boolean>;
  role: () => Promise<UserRole>;
  image: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  isBaned: () => Promise<AsyncIterator<Boolean>>;
  address: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  lastLoginTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastLogoutTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  isOnline: () => Promise<AsyncIterator<Boolean>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  birthDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  sexe: () => Promise<AsyncIterator<SexeType>>;
  telephone: () => Promise<AsyncIterator<Int>>;
  isActive: () => Promise<AsyncIterator<Boolean>>;
  role: () => Promise<AsyncIterator<UserRole>>;
  image: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  isBaned: () => Promise<Boolean>;
  address: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  lastLoginTime: () => Promise<DateTimeOutput>;
  lastLogoutTime: () => Promise<DateTimeOutput>;
  isOnline: () => Promise<Boolean>;
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  birthDate: () => Promise<DateTimeOutput>;
  sexe: () => Promise<SexeType>;
  telephone: () => Promise<Int>;
  isActive: () => Promise<Boolean>;
  role: () => Promise<UserRole>;
  image: () => Promise<String>;
}

export interface ClaimPreviousValues {
  id: ID_Output;
  title?: String;
  content: String;
  email: String;
}

export interface ClaimPreviousValuesPromise
  extends Promise<ClaimPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  email: () => Promise<String>;
}

export interface ClaimPreviousValuesSubscription
  extends Promise<AsyncIterator<ClaimPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface ClaimSubscriptionPayload {
  mutation: MutationType;
  node: Claim;
  updatedFields: String[];
  previousValues: ClaimPreviousValues;
}

export interface ClaimSubscriptionPayloadPromise
  extends Promise<ClaimSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClaimPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClaimPreviousValuesPromise>() => T;
}

export interface ClaimSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClaimSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClaimSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClaimPreviousValuesSubscription>() => T;
}

export interface TokenPreviousValues {
  id: ID_Output;
  type: TokenType;
  value: String;
  createdAt: DateTimeOutput;
}

export interface TokenPreviousValuesPromise
  extends Promise<TokenPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<TokenType>;
  value: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TokenPreviousValuesSubscription
  extends Promise<AsyncIterator<TokenPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<TokenType>>;
  value: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ClaimConnection {
  pageInfo: PageInfo;
  edges: ClaimEdge[];
}

export interface ClaimConnectionPromise
  extends Promise<ClaimConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClaimEdge>>() => T;
  aggregate: <T = AggregateClaimPromise>() => T;
}

export interface ClaimConnectionSubscription
  extends Promise<AsyncIterator<ClaimConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClaimEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClaimSubscription>() => T;
}

export interface Token {
  id: ID_Output;
  type: TokenType;
  value: String;
  createdAt: DateTimeOutput;
}

export interface TokenPromise extends Promise<Token>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<TokenType>;
  user: <T = UserPromise>() => T;
  value: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TokenSubscription
  extends Promise<AsyncIterator<Token>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<TokenType>>;
  user: <T = UserSubscription>() => T;
  value: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TokenNullablePromise
  extends Promise<Token | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<TokenType>;
  user: <T = UserPromise>() => T;
  value: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface TokenEdge {
  node: Token;
  cursor: String;
}

export interface TokenEdgePromise extends Promise<TokenEdge>, Fragmentable {
  node: <T = TokenPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TokenEdgeSubscription
  extends Promise<AsyncIterator<TokenEdge>>,
    Fragmentable {
  node: <T = TokenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateClaim {
  count: Int;
}

export interface AggregateClaimPromise
  extends Promise<AggregateClaim>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClaimSubscription
  extends Promise<AsyncIterator<AggregateClaim>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Token",
    embedded: false
  },
  {
    name: "Claim",
    embedded: false
  },
  {
    name: "SexeType",
    embedded: false
  },
  {
    name: "TokenType",
    embedded: false
  },
  {
    name: "UserRole",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
